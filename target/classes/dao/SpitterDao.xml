<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dao.SpitterDao">

    <resultMap id="spitterResultMap" type="model.Spitter">
        <id property="id" column="id" />
        <result property="username" column="username" />
        <result property="userportrait" column="userportrait" />
        <result property="password" column="password" />
        <result property="fullname" column="fullname" />
        <result property="email" column="email" />
        <result property="updatebyemail" column="updatebyemail" jdbcType="TINYINT" javaType="boolean"/>
    </resultMap>

    <resultMap id="spittleResultMap" type="model.Spittle">
        <id property="id" column="id" />
        <result property="spitter.id" column="spitterid" />
        <result property="spitter.username" column="spittername" />
        <result property="text" column="text" />
        <result property="whens" column="whens" jdbcType="DATE" javaType="java.util.Date"/>
    </resultMap>

    <resultMap id="commentResultMap" type="model.Comment">
        <id property="id" column="id" />
        <result property="spittleid" column="spittleid" />
        <result property="name" column="name" />
        <result property="comment" column="comment" />
    </resultMap>

    <resultMap id="banchOfSpittleResultMap" type="model.Spittle">
        <id property="id" column="id" />
        <result property="text" column="text" />
        <result property="whens" column="whens" jdbcType="DATE" javaType="java.util.Date"/>
        <association property="spitter" javaType="model.Spitter">
            <id property="id" column="spitterid" />
            <result property="username" column="spittername" />
            <result property="userportrait" column="userportrait" />
        </association>
    </resultMap>

    <insert id="addSpitter" parameterType="model.Spitter" flushCache="true">
        INSERT INTO spitter (username,userportrait,password,fullname,email,updatebyemail)
        VALUES (#{username},#{userportrait},#{password},#{fullname},#{email},#{updatebyemail})
    </insert>

    <insert id="saveSpittle" parameterType="model.Spittle" flushCache="true">
        INSERT INTO spittle (spitterid,spittername,text,whens)
        VALUES (#{spitter.id},#{spitter.username},#{text},#{whens})
    </insert>

    <update id="saveSpitter" parameterType="model.Spitter" flushCache="true">
        UPDATE spitter set username=#{username},userportrait=#{userportrait},password=#{password},fullname=#{fullname},email=#{email},updatebyemail=#{updatebyemail}
        where id=#{id}
    </update>

    <select id="getSpitterById" parameterType="model.Spitter" resultMap="spitterResultMap" >
        SELECT * FROM spitter WHERE id=#{id}
    </select>

    <select id="getRecentSpittle" parameterType="int" resultMap="spittleResultMap" >
        SELECT * FROM spittle  ORDER BY whens DESC LiMIT #{int};
    </select>

    <select id="getSpittlesForSpitter" parameterType="model.Spitter" resultMap="spittleResultMap" >
        SELECT * FROM spittle where spittername=#{username}
    </select>

    <select id="getSpitterByUsername" parameterType="String" resultMap="spitterResultMap">
        SELECT * FROM spitter WHERE username=#{username}
    </select>

    <delete id="deleteSpittle" parameterType="int" >
        DELETE FROM spittle where id=#{id}
    </delete>

    <select id="getSpittleById" parameterType="int" resultMap="spittleResultMap">
        SELECT * FROM spittle where id=#{id}
    </select>

    <select id="findAllSpitters" resultType="model.Spitter">
        SELECT * FROM spitter
    </select>

    <select id="getABunchOfSpittles" parameterType="int" resultMap="banchOfSpittleResultMap">
        SELECT el.id,
               el.text,
               el.whens,
               el.spitterid,
               el.spittername,
               er.userportrait
        FROM spittle el
        LEFT JOIN spitter er on er.id = el.spitterid
        order by RAND() limit #{int};
    </select>

    <select id="getSpittelsToDelete" parameterType="model.Spitter" resultMap="spittleResultMap">
        SELECT * FROM spittle where spittername=#{username};
    </select>

    <select id="findAllConments" resultMap="commentResultMap">
        SELECT * FROM comment where spittleid in
        <foreach collection="list" item="item" index="index" open="(" separator="," close=")">#{item}</foreach>
    </select>

</mapper>